from django.shortcuts import render
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json
from .models import *

# Create your views here.
@api_view(['POST'])
#@permission_classes([permissions.IsAuthenticated])
def createAuthor(request):
    try:
        if request.user.username == "":
            raise Exception("user is not signed in")
        if request.user.canCreateAuthor == False:
            raise Exception("User is not authorised")
        else:
            requestBodyToDict = json.loads(request.body)

            try:
                emailFromPostman = requestBodyToDict['email']

                checkEmailExists = Author.objects.filter(email = emailFromPostman).exists()

                if checkEmailExists == True:
                    raise Exception("Author is already added to the database")
                else:
                    nameFromPostmanBody = requestBodyToDict['name']
                    email = requestBodyToDict['email']

                    savingNameToDb = Author(name = nameFromPostmanBody, email=email)
                    savingNameToDb.save()

                    return JsonResponse({
                        "message":f"{nameFromPostmanBody} added to Author table"
                    })

            except Exception as ex:
                return JsonResponse({
                    "message":str(ex),
                    "status":"failed"
                }, status = status.HTTP_409_CONFLICT)

            

    except Exception as ex:
        return JsonResponse({
            "message":str(ex),
            "status":'falied'
        }, status = status.HTTP_401_UNAUTHORIZED)

@csrf_exempt
def createBooks(request):
        requestBodyToDict = json.loads(request.body)

        authorId = requestBodyToDict['author_id']
        authorName = Author.objects.get(id = authorId).name

        Books = requestBodyToDict['title']

        bookLists = []

        for  book in Books:
            bookLists.append(book)
            newBook = Book.objects.create(title = book, author_id = authorId)


        return JsonResponse({
            "message": f"{bookLists} of {authorName} added successfully"
        })

def getBooknamesFromAuthor(request):
     authId = (json.loads(request.body))['authorId']
     authorName = Author.objects.get(id = authId).name

     booksQuerySet = Book.objects.filter(author_id = authId)
     bookLists = []

     for  book in booksQuerySet:
        bookLists.append(book.title)
        newBook = Book.objects.create(title = book, author_id = authId)

     return JsonResponse({
        "message": f"{bookLists} of {authorName} retrieved successfully"
     })

@csrf_exempt
def updateAuthor(request):
    authId = (json.loads(request.body))['authorId']
    CN = (json.loads(request.body))['changedName']
   
    authObj = Author.objects.get(id = authId)
    oldName = authObj.name
    newName = Author.objects.filter(id=authId).update(name=CN)

    return JsonResponse({
        "message": f"{oldName} is replaced by {CN}"
    })

@csrf_exempt
def deleteAuthor(request):
    authId = (json.loads(request.body))['authorId']
    authObj = Author.objects.get(id = authId)
    name = authObj.name
    authObj.delete()

    return JsonResponse({
        "message": f"{name} is deleted from the author table"
    })

@csrf_exempt
def register(request):
    if request.method != "POST":
        return JsonResponse({
            "Message":"Method not supported",
            "Status":"Failed"
        },status = status.HTTP_405_METHOD_NOT_ALLOWED)
    
    else:
        data = json.loads(request.body)
        emaillll = data['email']
        usernameeee = data['username']
        passwordddd = data['password']
        canCreateAutor = data["canCreateAuthor"]

        if not usernameeee or not emaillll or not passwordddd:
            return JsonResponse({
                "Message":"Inputs Fields should not be empty"
            }, status = status.HTTP_400_BAD_REQUEST)
        
        else:
            user = User.objects.create_user(email = emaillll, username = usernameeee, password = passwordddd, canCreateAuthor = canCreateAutor)
            user.save()

            send_mail(
            "Congratualations",
            "We are so happy to have you onboard.",
            settings.EMAIL_HOST_USER,
            [email],
            fail_silently=False,
            )

            return JsonResponse({
                "Message":f"User {usernameeee} registered successfully"
            }, status = status.HTTP_201_CREATED)
        

@csrf_exempt
def login(request):
    if request.method != "POST":
        return JsonResponse({
            "Message":"Method not supported",
            "Status":"Failed"
        },status = status.HTTP_405_METHOD_NOT_ALLOWED)
    
    else:
        data = json.loads(request.body)
        usernameeee = data['username']
        passwordddd = data['password']

        if not usernameeee or not passwordddd:
            return JsonResponse({
                "Message":"Inputs Fields should not be empty"
            }, status = status.HTTP_400_BAD_REQUEST)
        
        else:
            user = authenticate(request, username = usernameeee, password = passwordddd)

            if user is not None:
                refresf = RefreshToken.for_user(user)

                return JsonResponse({
                    "access-token":str(refresf.access_token),
                    "refresh-token":str(refresf)
                })


